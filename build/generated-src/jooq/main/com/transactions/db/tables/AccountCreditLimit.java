/*
 * This file is generated by jOOQ.
 */
package com.transactions.db.tables;


import com.transactions.db.Keys;
import com.transactions.db.Public;
import com.transactions.db.tables.records.AccountCreditLimitRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountCreditLimit extends TableImpl<AccountCreditLimitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_credit_limit</code>
     */
    public static final AccountCreditLimit ACCOUNT_CREDIT_LIMIT = new AccountCreditLimit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountCreditLimitRecord> getRecordType() {
        return AccountCreditLimitRecord.class;
    }

    /**
     * The column <code>public.account_credit_limit.id</code>.
     */
    public final TableField<AccountCreditLimitRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.account_credit_limit.account_id</code>.
     */
    public final TableField<AccountCreditLimitRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.account_credit_limit.availablecreditlimit</code>.
     */
    public final TableField<AccountCreditLimitRecord, String> AVAILABLECREDITLIMIT = createField(DSL.name("availablecreditlimit"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.account_credit_limit.transactionaggregate</code>.
     */
    public final TableField<AccountCreditLimitRecord, String> TRANSACTIONAGGREGATE = createField(DSL.name("transactionaggregate"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'0'::character varying"), SQLDataType.VARCHAR)), this, "");

    private AccountCreditLimit(Name alias, Table<AccountCreditLimitRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountCreditLimit(Name alias, Table<AccountCreditLimitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.account_credit_limit</code> table
     * reference
     */
    public AccountCreditLimit(String alias) {
        this(DSL.name(alias), ACCOUNT_CREDIT_LIMIT);
    }

    /**
     * Create an aliased <code>public.account_credit_limit</code> table
     * reference
     */
    public AccountCreditLimit(Name alias) {
        this(alias, ACCOUNT_CREDIT_LIMIT);
    }

    /**
     * Create a <code>public.account_credit_limit</code> table reference
     */
    public AccountCreditLimit() {
        this(DSL.name("account_credit_limit"), null);
    }

    public <O extends Record> AccountCreditLimit(Table<O> child, ForeignKey<O, AccountCreditLimitRecord> key) {
        super(child, key, ACCOUNT_CREDIT_LIMIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountCreditLimitRecord> getPrimaryKey() {
        return Keys.ACCOUNT_CREDIT_LIMIT_PKEY;
    }

    @Override
    public List<UniqueKey<AccountCreditLimitRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACCOUNT_CREDIT_LIMIT_ACCOUNT_ID_KEY);
    }

    @Override
    public List<ForeignKey<AccountCreditLimitRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNT_CREDIT_LIMIT__FK_ACCOUNT);
    }

    private transient Accounts _accounts;

    /**
     * Get the implicit join path to the <code>public.accounts</code> table.
     */
    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.ACCOUNT_CREDIT_LIMIT__FK_ACCOUNT);

        return _accounts;
    }

    @Override
    public AccountCreditLimit as(String alias) {
        return new AccountCreditLimit(DSL.name(alias), this);
    }

    @Override
    public AccountCreditLimit as(Name alias) {
        return new AccountCreditLimit(alias, this);
    }

    @Override
    public AccountCreditLimit as(Table<?> alias) {
        return new AccountCreditLimit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountCreditLimit rename(String name) {
        return new AccountCreditLimit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountCreditLimit rename(Name name) {
        return new AccountCreditLimit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountCreditLimit rename(Table<?> name) {
        return new AccountCreditLimit(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
