/*
 * This file is generated by jOOQ.
 */
package com.transactions.db.tables.records;


import com.transactions.db.tables.AccountCreditLimit;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountCreditLimitRecord extends UpdatableRecordImpl<AccountCreditLimitRecord> implements Record4<UUID, UUID, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.account_credit_limit.id</code>.
     */
    public AccountCreditLimitRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.account_credit_limit.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.account_credit_limit.account_id</code>.
     */
    public AccountCreditLimitRecord setAccountId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.account_credit_limit.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.account_credit_limit.availablecreditlimit</code>.
     */
    public AccountCreditLimitRecord setAvailablecreditlimit(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.account_credit_limit.availablecreditlimit</code>.
     */
    public String getAvailablecreditlimit() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.account_credit_limit.transactionaggregate</code>.
     */
    public AccountCreditLimitRecord setTransactionaggregate(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.account_credit_limit.transactionaggregate</code>.
     */
    public String getTransactionaggregate() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return AccountCreditLimit.ACCOUNT_CREDIT_LIMIT.ID;
    }

    @Override
    public Field<UUID> field2() {
        return AccountCreditLimit.ACCOUNT_CREDIT_LIMIT.ACCOUNT_ID;
    }

    @Override
    public Field<String> field3() {
        return AccountCreditLimit.ACCOUNT_CREDIT_LIMIT.AVAILABLECREDITLIMIT;
    }

    @Override
    public Field<String> field4() {
        return AccountCreditLimit.ACCOUNT_CREDIT_LIMIT.TRANSACTIONAGGREGATE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getAccountId();
    }

    @Override
    public String component3() {
        return getAvailablecreditlimit();
    }

    @Override
    public String component4() {
        return getTransactionaggregate();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getAccountId();
    }

    @Override
    public String value3() {
        return getAvailablecreditlimit();
    }

    @Override
    public String value4() {
        return getTransactionaggregate();
    }

    @Override
    public AccountCreditLimitRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public AccountCreditLimitRecord value2(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public AccountCreditLimitRecord value3(String value) {
        setAvailablecreditlimit(value);
        return this;
    }

    @Override
    public AccountCreditLimitRecord value4(String value) {
        setTransactionaggregate(value);
        return this;
    }

    @Override
    public AccountCreditLimitRecord values(UUID value1, UUID value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountCreditLimitRecord
     */
    public AccountCreditLimitRecord() {
        super(AccountCreditLimit.ACCOUNT_CREDIT_LIMIT);
    }

    /**
     * Create a detached, initialised AccountCreditLimitRecord
     */
    public AccountCreditLimitRecord(UUID id, UUID accountId, String availablecreditlimit, String transactionaggregate) {
        super(AccountCreditLimit.ACCOUNT_CREDIT_LIMIT);

        setId(id);
        setAccountId(accountId);
        setAvailablecreditlimit(availablecreditlimit);
        setTransactionaggregate(transactionaggregate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AccountCreditLimitRecord
     */
    public AccountCreditLimitRecord(com.transactions.db.tables.pojos.AccountCreditLimit value) {
        super(AccountCreditLimit.ACCOUNT_CREDIT_LIMIT);

        if (value != null) {
            setId(value.getId());
            setAccountId(value.getAccountId());
            setAvailablecreditlimit(value.getAvailablecreditlimit());
            setTransactionaggregate(value.getTransactionaggregate());
            resetChangedOnNotNull();
        }
    }
}
