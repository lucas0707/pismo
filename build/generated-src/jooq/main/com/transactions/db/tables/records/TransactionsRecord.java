/*
 * This file is generated by jOOQ.
 */
package com.transactions.db.tables.records;


import com.transactions.db.tables.Transactions;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionsRecord extends UpdatableRecordImpl<TransactionsRecord> implements Record5<UUID, String, LocalDateTime, UUID, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.transactions.transaction_id</code>.
     */
    public TransactionsRecord setTransactionId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.transaction_id</code>.
     */
    public UUID getTransactionId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.transactions.amount</code>.
     */
    public TransactionsRecord setAmount(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.amount</code>.
     */
    public String getAmount() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.transactions.event_date</code>.
     */
    public TransactionsRecord setEventDate(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.event_date</code>.
     */
    public LocalDateTime getEventDate() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.transactions.account_id</code>.
     */
    public TransactionsRecord setAccountId(UUID value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>public.transactions.operation_type_id</code>.
     */
    public TransactionsRecord setOperationTypeId(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.operation_type_id</code>.
     */
    public Integer getOperationTypeId() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, LocalDateTime, UUID, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, String, LocalDateTime, UUID, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Transactions.TRANSACTIONS.TRANSACTION_ID;
    }

    @Override
    public Field<String> field2() {
        return Transactions.TRANSACTIONS.AMOUNT;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Transactions.TRANSACTIONS.EVENT_DATE;
    }

    @Override
    public Field<UUID> field4() {
        return Transactions.TRANSACTIONS.ACCOUNT_ID;
    }

    @Override
    public Field<Integer> field5() {
        return Transactions.TRANSACTIONS.OPERATION_TYPE_ID;
    }

    @Override
    public UUID component1() {
        return getTransactionId();
    }

    @Override
    public String component2() {
        return getAmount();
    }

    @Override
    public LocalDateTime component3() {
        return getEventDate();
    }

    @Override
    public UUID component4() {
        return getAccountId();
    }

    @Override
    public Integer component5() {
        return getOperationTypeId();
    }

    @Override
    public UUID value1() {
        return getTransactionId();
    }

    @Override
    public String value2() {
        return getAmount();
    }

    @Override
    public LocalDateTime value3() {
        return getEventDate();
    }

    @Override
    public UUID value4() {
        return getAccountId();
    }

    @Override
    public Integer value5() {
        return getOperationTypeId();
    }

    @Override
    public TransactionsRecord value1(UUID value) {
        setTransactionId(value);
        return this;
    }

    @Override
    public TransactionsRecord value2(String value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionsRecord value3(LocalDateTime value) {
        setEventDate(value);
        return this;
    }

    @Override
    public TransactionsRecord value4(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public TransactionsRecord value5(Integer value) {
        setOperationTypeId(value);
        return this;
    }

    @Override
    public TransactionsRecord values(UUID value1, String value2, LocalDateTime value3, UUID value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionsRecord
     */
    public TransactionsRecord() {
        super(Transactions.TRANSACTIONS);
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(UUID transactionId, String amount, LocalDateTime eventDate, UUID accountId, Integer operationTypeId) {
        super(Transactions.TRANSACTIONS);

        setTransactionId(transactionId);
        setAmount(amount);
        setEventDate(eventDate);
        setAccountId(accountId);
        setOperationTypeId(operationTypeId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(com.transactions.db.tables.pojos.Transactions value) {
        super(Transactions.TRANSACTIONS);

        if (value != null) {
            setTransactionId(value.getTransactionId());
            setAmount(value.getAmount());
            setEventDate(value.getEventDate());
            setAccountId(value.getAccountId());
            setOperationTypeId(value.getOperationTypeId());
            resetChangedOnNotNull();
        }
    }
}
